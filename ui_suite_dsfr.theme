<?php

/**
 * @file
 * Functions to support theming in the UI Suite DSFR theme.
 */

use Drupal\Component\Render\MarkupInterface;
use Drupal\Component\Utility\Crypt;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function ui_suite_dsfr_preprocess_page(&$variables) {
  $variables['container'] = theme_get_setting('container');

  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['site_slogan'] = $config->get('slogan');
}

/**
 * Implements hook_preprocess_HOOK() for card patterns.
 */
function ui_suite_dsfr_preprocess_pattern_card(array &$variables) {
  if (isset($variables['title'])) {
    _ui_suite_dsfr_add_link_class($variables['title'], 'fr-card__link');
  }
}

/**
 * Implements hook_preprocess_HOOK() for tile patterns.
 */
function ui_suite_dsfr_preprocess_pattern_tile(array &$variables) {
  if (isset($variables['title'])) {
    _ui_suite_dsfr_add_link_class($variables['title'], 'fr-tile__link');
  }
}

/**
 * Adds class to link element.
 *
 * @param mixed $element
 *   Element.
 * @param string $class
 *   CSS class.
 */
function _ui_suite_dsfr_add_link_class(&$element, string $class) {
  if (!is_array($element)) {
    return;
  }
  if (Element::getVisibleChildren($element)) {
    foreach (Element::children($element) as $child) {
      if (!array_key_exists('#type', $element[$child])) {
        continue;
      }
      if ($element[$child]['#type'] === 'link'
        || ($element[$child]['#type'] === 'html_tag' && $element[$child]['#tag'] === 'a')
        || ($element[$child]['#type'] === 'pattern' && $element[$child]['#id'] === 'link')) {
        $element[$child]['#attributes']['class'][] = $class;
      }
    }
  }
  elseif ($element['#type'] === 'link'
    || ($element['#type'] === 'html_tag' && $element['#tag'] === 'a')
    || ($element['#type'] === 'pattern' && $element['#id'] === 'link')) {
    $element['#attributes']['class'][] = $class;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ui_suite_dsfr_form_alter(&$form, &$form_state, $form_id) {
  $form['#attributes']['novalidate'] = 'novalidate';
  // Style form buttons like button patterns.
  if (isset($form['actions'])) {
    $actions = Element::children($form['actions']);
    foreach ($actions as $action) {
      if ($form['actions'][$action]['#type'] == 'submit') {
        $form['actions'][$action]['#attributes']['class'][] = 'fr-btn';
        if ($form_id == 'search_block_form') {
          continue;
        }
        if (!empty($form['actions'][$action]['#button_type'])) {
          if ($form['actions'][$action]['#button_type'] !== 'primary') {
            $form['actions'][$action]['#attributes']['class'][] = 'fr-btn--secondary';
          }
        }
        else {
          $form['actions'][$action]['#attributes']['class'][] = 'fr-btn--secondary';
        }
      }
    }
  }

  if (!isset($form['ui_styles'])) {
    return;
  }

  // Add ui styles for text and background from theme setting.
  $colors = _ui_suite_dsfr_get_colors_settings();
  $options = [];
  foreach ($colors as $id => $color) {
    foreach ($color['types'] as $type => $values) {
      foreach ($values as $value) {
        $options[$type]["fr-$type-$value--$id"] = ucfirst($value) . ' ' . $color['label'];
      }
    }
  }

  foreach (Element::children($form) as $key) {
    if (str_starts_with($key, 'ui_styles') && isset($form[$key]['color'])) {
      $form[$key]['color']['ui_styles_background']['#options'] += $options['background'];
      $form[$key]['color']['ui_styles_text_color']['#options'] += $options['text'];
      // Sort asc.
      ksort($form[$key]['color']['ui_styles_background']['#options']);
      ksort($form[$key]['color']['ui_styles_text_color']['#options']);
    }
  }
}

/**
 * Implements hook_preprocess_form_input().
 */
function ui_suite_dsfr_preprocess_input(array &$variables) {
  if (in_array($variables['element']['#type'],
    ['hidden', 'submit', 'token', 'button'])) {
    return;
  }
  $error_id = 'error-desc--';
  if (isset($variables['element']['#name'])) {
    $error_id .= $variables['element']['#name'];
  }
  // Here we need to add aria-describedby prop for single checkbox only.
  if (in_array($variables['element']['#type'], ['checkbox', 'radio'])) {
    if (isset($variables['element']['#delta'])
      && !empty($variables['element']['#errors'])) {
      $variables['attributes']['aria-describedby'] = $error_id;
    }
    return;
  }
  $class = 'fr-input';
  if ($variables['element']['#type'] == 'file') {
    $class = 'fr-upload';
  }
  if ($variables['element']['#type'] == 'checkboxes') {
    $class = 'fr-fieldset';
  }

  $variables['attributes']['class'][] = $class;
  if (!empty($variables['element']['#errors'])) {
    $variables['attributes']['class'][] = $class . '--error';
    // Move error to input, so can be used in input template.
    $variables['errors'] = $variables['element']['#errors'];
    $variables['attributes']['aria-describedby'] = $error_id;
    $variables['error_id'] = $error_id;
  }
}

/**
 * Implements hook_preprocess_select().
 */
function ui_suite_dsfr_preprocess_select(array &$variables) {
  $class = 'fr-select';
  $variables['attributes']['class'][] = $class;
  if (!empty($variables['element']['#errors'])) {
    $error_id = 'error-desc--' . $variables['element']['#name'];
    $variables['attributes']['class'][] = $class . '--error';
    // Move error to input, so can be used in select template.
    $variables['errors'] = $variables['element']['#errors'];
    $variables['attributes']['aria-describedby'] = $error_id;
    $variables['error_id'] = $error_id;
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function ui_suite_dsfr_theme_suggestions_form_element_alter(array &$suggestions, array $variables, $hook) {
  if (isset($variables['element']['#id'])) {
    $suggestions[] = $hook . '__' . $variables['element']['#id'];
  }
  if (isset($variables['element']['#type'])) {
    $suggestions[] = $hook . '__' . $variables['element']['#type'];
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function ui_suite_dsfr_theme_suggestions_input_alter(&$suggestions, array $variables) {
  if (isset($variables['element']['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $variables['element']['#type'] . '__' . $variables['element']['#attributes']['data-twig-suggestion'];
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function ui_suite_dsfr_preprocess_form_element(array &$variables) {
  switch ($variables['element']['#type']) {
    case 'checkbox':
    case 'radio':
      $class = $variables['element']['#type'] == 'radio' ? 'fr-radio-group' : 'fr-checkbox-group';
      // Here we need to add error in form element template only for
      // single checkbox. These vars can be used in form_element.twig.html.
      $variables['add_error'] = isset($variables['element']['#delta']);
      $variables['error_id'] = 'error-desc--';
      if (isset($variables['element']['#name'])) {
        $variables['error_id'] .= $variables['element']['#name'];
      }
      $error_class = isset($variables['element']['#delta']) ? $class . '--error' : NULL;
      break;

    case 'managed_file':
      $class = 'fr-upload-group';
      $error_class = 'fr-input-group--error';
      break;

    case 'select':
      $class = 'fr-select-group';
      $error_class = 'fr-select-group--error';
      break;

    default:
      $class = 'fr-input-group';
      $error_class = $class . '--error';
  }
  $variables['attributes']['class'][] = $class;

  if (!empty($variables['errors']) && isset($error_class)) {
    $variables['attributes']['class'][] = $error_class;
  }

  // We need to have description in form element label template.
  $variables['label']['#description'] = $variables['description'] ?? [];
}

/**
 * Implements hook_preprocess_fieldset().
 */
function ui_suite_dsfr_preprocess_fieldset(array &$variables) {
  unset($variables['attributes']['aria-describedby']);
  $variables['attributes']['class'][] = 'fr-fieldset';
  $name = $variables['element']['#name'] = $variables['element']['#name'] ?? 'fs-' . Crypt::randomBytesBase64(8);
  $legend_id = 'fs-legend--' . $name;
  $variables['attributes']['aria-labelledby'] = $legend_id;
  $variables['legend']['attributes']['id'] = $legend_id;
  // In case of error we need additional attributes.
  if (!empty($variables['errors'])) {
    $variables['attributes']['class'][] = 'fr-fieldset--error';
    $variables['error_id'] = 'error-desc--' . $name;
    $variables['attributes']['aria-labelledby'] .= ' ' . $variables['error_id'];
  }
}

/**
 * Implements hook_preprocess_form_element_label().
 */
function ui_suite_dsfr_preprocess_form_element_label(array &$variables) {
  // We need to have description in form element label template.
  $variables['description'] = $variables['element']['#description'];
}

/**
 * Implements hook_preprocess_form().
 */
function ui_suite_dsfr_preprocess_form(&$vars) {
  if ($vars['element']['#form_id'] == 'search_block_form') {
    $vars['attributes']['class'][] = 'fr-search-bar';
  }
}

/**
 * Implements hook_form_alter().
 */
function ui_suite_dsfr_form_search_block_form_alter(&$form, &$form_state) {
  $form['keys']['#attributes']['placeholder'][] = t('Search');
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_submit';
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function ui_suite_dsfr_form_system_theme_settings_alter(&$form, $form_state) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['ui_suite_dsfr_settings']['ui_suite_dsfr_utilities'] = [
    '#type' => 'details',
    '#title' => t('UI Suite DSFR Utilities'),
    '#open' => TRUE,
  ];

  $form['ui_suite_dsfr_settings']['ui_suite_dsfr_utilities']['container'] = [
    '#type' => 'select',
    '#title' => t('Container'),
    '#default_value' => theme_get_setting('container'),
    '#description' => t('Select the type of container that will be used on your site.'),
    '#options' => [
      'fr-container' => t('Default'),
      'fr-container--fluid' => t('Fluid'),
    ],
  ];

  $colors = _ui_suite_dsfr_get_colors_options();
  if (isset($colors)) {
    $form['ui_suite_dsfr_settings']['ui_suite_dsfr_utilities']['available_colors'] = [
      '#type' => 'select',
      '#title' => t('Available colors'),
      '#multiple' => TRUE,
      '#size' => 12,
      '#default_value' => theme_get_setting('available_colors'),
      '#description' => t('If no selected - then all will be available. For more info visit <a href="https://gouvfr.atlassian.net/wiki/spaces/DB/pages/217186370/Couleurs+-+palette+-+Color" target="_blank">DSFR Colors</a> page.'),
      '#options' => $colors,
    ];
  }
}

/**
 * Gets all colors options.
 *
 * @return array
 *   Array with values.
 */
function _ui_suite_dsfr_get_colors_options() {
  $theme = \Drupal::config('system.theme')->get('default');
  /** @var \Drupal\Core\Extension\ThemeExtensionList $theme_list */
  $theme_list = \Drupal::service('extension.list.theme');
  $info = $theme_list->getExtensionInfo($theme);
  if (isset($info['colors'])) {
    $colors_options = [];
    foreach ($info['colors'] as $id => $color) {
      $colors_options[$id] = $color['label'];
    }
    return $colors_options;
  }
  else {
    return [];
  }
}

/**
 * Gets all available colors settings.
 *
 * @return array
 *   Array with values.
 */
function _ui_suite_dsfr_get_colors_settings() {
  $theme = \Drupal::config('system.theme')->get('default');
  /** @var \Drupal\Core\Extension\ThemeExtensionList $theme_list */
  $theme_list = \Drupal::service('extension.list.theme');
  $info = $theme_list->getExtensionInfo($theme);
  if (isset($info['colors'])) {
    $theme_value = theme_get_setting('available_colors');
    if (!$theme_value) {
      return $info['colors'];
    }
    $colors = [];
    foreach ($theme_value as $value) {
      if (isset($info['colors'][$value])) {
        $colors[$value] = $info['colors'][$value];
      }
    }
    return $colors;
  }
  else {
    return [];
  }
}

/**
 * Implements hook_preprocess_pattern_pagination().
 */
function ui_suite_dsfr_preprocess_pattern_pagination(array &$variables) {
  if (isset($variables['current'])) {
    if ($variables['current'] instanceof MarkupInterface) {
      $variables['current'] = $variables['current']->__toString();
    }
    $variables['current'] = (int) $variables['current'];
  }
  if (!isset($variables['items']['pages'])) {
    return;
  }
  foreach ($variables['items']['pages'] as &$page) {
    if (isset($page['attributes'])) {
      if (!($page['attributes'] instanceof Attribute)) {
        $page['attributes'] = new Attribute($page['attributes']);
      }
    }
    else {
      $page['attributes'] = new Attribute();
    }
  }
  foreach (['first', 'last', 'previous', 'next'] as $item) {
    if (isset($variables['items'][$item])) {
      if (isset($variables['items'][$item]['attributes'])) {
        if (!($variables['items'][$item]['attributes'] instanceof Attribute)) {
          $variables['items'][$item]['attributes'] = new Attribute($variables['items'][$item]['attributes']);
        }
      }
      else {
        $variables['items'][$item]['attributes'] = new Attribute();
      }
    }
  }
}

/**
 * Implements hook_preprocess_pattern_footer().
 */
function ui_suite_dsfr_preprocess_pattern_footer(array &$variables) {
  if (empty($variables['service_title'])) {
    $variables['service_title'] = \Drupal::config('system.site')->get('name');
  }
}

/**
 * Implements hook_preprocess_pattern_header().
 */
function ui_suite_dsfr_preprocess_pattern_header(array &$variables) {
  if (empty($variables['service_title'])) {
    $variables['service_title'] = \Drupal::config('system.site')->get('name');
  }
  if (empty($variables['service_tagline'])) {
    $variables['service_tagline'] = \Drupal::config('system.site')->get('slogan');
  }
}

/**
 * Implements hook_preprocess_pattern_link().
 */
function ui_suite_dsfr_preprocess_pattern_link(array &$variables) {
  if (empty($variables['url'])) {
    return;
  }
  if (UrlHelper::isExternal($variables['url'])
    && !UrlHelper::externalIsLocal($variables['url'], \Drupal::request()->getSchemeAndHttpHost())) {
    $variables['external'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_pattern_button().
 */
function ui_suite_dsfr_preprocess_pattern_button(array &$variables) {
  if (empty($variables['url'])) {
    return;
  }
  if (UrlHelper::isExternal($variables['url'])
    && !UrlHelper::externalIsLocal($variables['url'], \Drupal::request()->getSchemeAndHttpHost())) {
    $variables['external'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_textarea().
 */
function ui_suite_dsfr_preprocess_textarea(array &$variables) {
  if (!empty($variables['element']['#errors'])) {
    $error_id = 'error-desc--';
    $variables['attributes']['class'][] = 'fr-input--error';
    // Move error to input, so can be used in input template.
    $variables['errors'] = $variables['element']['#errors'];
    $variables['attributes']['aria-describedby'] = $error_id;
    $variables['error_id'] = $error_id;
  }
}

/**
 * Implements hook_preprocess_pattern_footer_menu().
 */
function ui_suite_dsfr_preprocess_pattern_footer_menu(array &$variables) {
  foreach ($variables['items'] as &$item) {
    if (empty($item['url'])) {
      return;
    }

    // @TODO : remove when #3345071 is fixed (new links setting)
    if ($item['url'] instanceof Url) {
      $url = $item['url'];
      $item['url'] = $url->toString();

      $options = $url->getOptions();

      if (isset($options['attributes'])) {
        $item['link_attributes'] = $options['attributes'];
      }
    }

    if (UrlHelper::isExternal($item['url'])
        && !UrlHelper::externalIsLocal($item['url'], \Drupal::request()->getSchemeAndHttpHost())) {
      $item['link_attributes']['target'] = '_blank';
    }
  }
}
